/*
 * Copyright (c) 2022, Oracle and/or its affiliates. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

/*
 * Protos for serializing Tribuo Math classes.
 */
package tribuo.math.impl;

option java_multiple_files = true;
option java_package = "org.tribuo.math.protos";

// Import Tribuo's math interface protos
import "tribuo-math.proto";

/*
DenseTensor proto

Data is stored in multidimensional row-major order using little
endian double precision floats.
 */
message DenseTensorProto {
  repeated int32 dimensions = 1;
  bytes values = 2;
}

/*
SparseTensor proto

Values and indices are stored in multidimensional row-major order using little
endian double precision floats for values and little endian ints for indices.
 */
message SparseTensorProto {
  repeated int32 dimensions = 1;
  int32 numNonZero = 2;
  bytes indices = 3;
  bytes values = 4;
}

/*
LinearParameters proto
 */
message LinearParametersProto {
  tribuo.math.TensorProto weightMatrix = 1;
}

/*
ShrinkingTensor Proto, uses dense tensors.
 */
message ShrinkingDenseTensorProto {
  DenseTensorProto data = 1;
  double baseRate = 2;
  double lambdaSqrt = 3;
  bool scaleShrinking = 4;
  bool reproject = 5;
  double squaredTwoNorm = 6;
  int32 iteration = 7;
  double multiplier = 8;
}

/*
AdaGradRDA tensor proto, uses dense tensors.

Data is stored in multidimensional row-major order using little
endian double precision floats.
 */
message AdaGradRDADenseTensorProto {
  DenseTensorProto data = 1;
  double learningRate = 2;
  double epsilon = 3;
  double l1 = 4;
  double l2 = 5;
  bytes gradNorms = 6;
  int32 iteration = 7;
}

/*
Polynomial kernel proto
 */
message PolynomialKernelProto {
  double gamma = 1;
  double intercept = 2;
  double degree = 3;
}

/*
RBF kernel proto
 */
message RBFKernelProto {
  double gamma = 1;
}

/*
Sigmoid kernel proto
 */
message SigmoidKernelProto {
  double gamma = 1;
  double intercept = 2;
}

/*
NeighboursBruteForceFactory proto
 */
message BruteForceFactoryProto {
  int32 numThreads = 1;
  tribuo.math.DistanceProto distance = 2;
}

/*
KDTreeFactory proto
 */
message KDTreeFactoryProto {
  int32 numThreads = 1;
  tribuo.math.DistanceProto distance = 2;
}

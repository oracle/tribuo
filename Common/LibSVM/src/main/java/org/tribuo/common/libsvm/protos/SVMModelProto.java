// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tribuo-libsvm.proto

// Protobuf Java Version: 3.25.5
package org.tribuo.common.libsvm.protos;

/**
 * <pre>
 *
 *svm_model proto
 * </pre>
 *
 * Protobuf type {@code tribuo.common.libsvm.SVMModelProto}
 */
public final class SVMModelProto extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:tribuo.common.libsvm.SVMModelProto)
    SVMModelProtoOrBuilder {
private static final long serialVersionUID = 0L;
  // Use SVMModelProto.newBuilder() to construct.
  private SVMModelProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private SVMModelProto() {
    sV_ = java.util.Collections.emptyList();
    svCoefLengths_ = emptyIntList();
    svCoef_ = emptyDoubleList();
    rho_ = emptyDoubleList();
    probA_ = emptyDoubleList();
    probB_ = emptyDoubleList();
    svIndices_ = emptyIntList();
    label_ = emptyIntList();
    nSV_ = emptyIntList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new SVMModelProto();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return org.tribuo.common.libsvm.protos.TribuoLibsvm.internal_static_tribuo_common_libsvm_SVMModelProto_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.tribuo.common.libsvm.protos.TribuoLibsvm.internal_static_tribuo_common_libsvm_SVMModelProto_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.tribuo.common.libsvm.protos.SVMModelProto.class, org.tribuo.common.libsvm.protos.SVMModelProto.Builder.class);
  }

  private int bitField0_;
  public static final int PARAM_FIELD_NUMBER = 1;
  private org.tribuo.common.libsvm.protos.SVMParameterProto param_;
  /**
   * <code>.tribuo.common.libsvm.SVMParameterProto param = 1;</code>
   * @return Whether the param field is set.
   */
  @java.lang.Override
  public boolean hasParam() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <code>.tribuo.common.libsvm.SVMParameterProto param = 1;</code>
   * @return The param.
   */
  @java.lang.Override
  public org.tribuo.common.libsvm.protos.SVMParameterProto getParam() {
    return param_ == null ? org.tribuo.common.libsvm.protos.SVMParameterProto.getDefaultInstance() : param_;
  }
  /**
   * <code>.tribuo.common.libsvm.SVMParameterProto param = 1;</code>
   */
  @java.lang.Override
  public org.tribuo.common.libsvm.protos.SVMParameterProtoOrBuilder getParamOrBuilder() {
    return param_ == null ? org.tribuo.common.libsvm.protos.SVMParameterProto.getDefaultInstance() : param_;
  }

  public static final int NR_CLASS_FIELD_NUMBER = 2;
  private int nrClass_ = 0;
  /**
   * <code>int32 nr_class = 2;</code>
   * @return The nrClass.
   */
  @java.lang.Override
  public int getNrClass() {
    return nrClass_;
  }

  public static final int L_FIELD_NUMBER = 3;
  private int l_ = 0;
  /**
   * <code>int32 l = 3;</code>
   * @return The l.
   */
  @java.lang.Override
  public int getL() {
    return l_;
  }

  public static final int SV_FIELD_NUMBER = 4;
  @SuppressWarnings("serial")
  private java.util.List<org.tribuo.common.libsvm.protos.SVMNodeArrayProto> sV_;
  /**
   * <code>repeated .tribuo.common.libsvm.SVMNodeArrayProto SV = 4;</code>
   */
  @java.lang.Override
  public java.util.List<org.tribuo.common.libsvm.protos.SVMNodeArrayProto> getSVList() {
    return sV_;
  }
  /**
   * <code>repeated .tribuo.common.libsvm.SVMNodeArrayProto SV = 4;</code>
   */
  @java.lang.Override
  public java.util.List<? extends org.tribuo.common.libsvm.protos.SVMNodeArrayProtoOrBuilder> 
      getSVOrBuilderList() {
    return sV_;
  }
  /**
   * <code>repeated .tribuo.common.libsvm.SVMNodeArrayProto SV = 4;</code>
   */
  @java.lang.Override
  public int getSVCount() {
    return sV_.size();
  }
  /**
   * <code>repeated .tribuo.common.libsvm.SVMNodeArrayProto SV = 4;</code>
   */
  @java.lang.Override
  public org.tribuo.common.libsvm.protos.SVMNodeArrayProto getSV(int index) {
    return sV_.get(index);
  }
  /**
   * <code>repeated .tribuo.common.libsvm.SVMNodeArrayProto SV = 4;</code>
   */
  @java.lang.Override
  public org.tribuo.common.libsvm.protos.SVMNodeArrayProtoOrBuilder getSVOrBuilder(
      int index) {
    return sV_.get(index);
  }

  public static final int SV_COEF_LENGTHS_FIELD_NUMBER = 5;
  @SuppressWarnings("serial")
  private com.google.protobuf.Internal.IntList svCoefLengths_ =
      emptyIntList();
  /**
   * <code>repeated int32 sv_coef_lengths = 5;</code>
   * @return A list containing the svCoefLengths.
   */
  @java.lang.Override
  public java.util.List<java.lang.Integer>
      getSvCoefLengthsList() {
    return svCoefLengths_;
  }
  /**
   * <code>repeated int32 sv_coef_lengths = 5;</code>
   * @return The count of svCoefLengths.
   */
  public int getSvCoefLengthsCount() {
    return svCoefLengths_.size();
  }
  /**
   * <code>repeated int32 sv_coef_lengths = 5;</code>
   * @param index The index of the element to return.
   * @return The svCoefLengths at the given index.
   */
  public int getSvCoefLengths(int index) {
    return svCoefLengths_.getInt(index);
  }
  private int svCoefLengthsMemoizedSerializedSize = -1;

  public static final int SV_COEF_FIELD_NUMBER = 6;
  @SuppressWarnings("serial")
  private com.google.protobuf.Internal.DoubleList svCoef_ =
      emptyDoubleList();
  /**
   * <code>repeated double sv_coef = 6;</code>
   * @return A list containing the svCoef.
   */
  @java.lang.Override
  public java.util.List<java.lang.Double>
      getSvCoefList() {
    return svCoef_;
  }
  /**
   * <code>repeated double sv_coef = 6;</code>
   * @return The count of svCoef.
   */
  public int getSvCoefCount() {
    return svCoef_.size();
  }
  /**
   * <code>repeated double sv_coef = 6;</code>
   * @param index The index of the element to return.
   * @return The svCoef at the given index.
   */
  public double getSvCoef(int index) {
    return svCoef_.getDouble(index);
  }
  private int svCoefMemoizedSerializedSize = -1;

  public static final int RHO_FIELD_NUMBER = 7;
  @SuppressWarnings("serial")
  private com.google.protobuf.Internal.DoubleList rho_ =
      emptyDoubleList();
  /**
   * <code>repeated double rho = 7;</code>
   * @return A list containing the rho.
   */
  @java.lang.Override
  public java.util.List<java.lang.Double>
      getRhoList() {
    return rho_;
  }
  /**
   * <code>repeated double rho = 7;</code>
   * @return The count of rho.
   */
  public int getRhoCount() {
    return rho_.size();
  }
  /**
   * <code>repeated double rho = 7;</code>
   * @param index The index of the element to return.
   * @return The rho at the given index.
   */
  public double getRho(int index) {
    return rho_.getDouble(index);
  }
  private int rhoMemoizedSerializedSize = -1;

  public static final int PROBA_FIELD_NUMBER = 8;
  @SuppressWarnings("serial")
  private com.google.protobuf.Internal.DoubleList probA_ =
      emptyDoubleList();
  /**
   * <code>repeated double probA = 8;</code>
   * @return A list containing the probA.
   */
  @java.lang.Override
  public java.util.List<java.lang.Double>
      getProbAList() {
    return probA_;
  }
  /**
   * <code>repeated double probA = 8;</code>
   * @return The count of probA.
   */
  public int getProbACount() {
    return probA_.size();
  }
  /**
   * <code>repeated double probA = 8;</code>
   * @param index The index of the element to return.
   * @return The probA at the given index.
   */
  public double getProbA(int index) {
    return probA_.getDouble(index);
  }
  private int probAMemoizedSerializedSize = -1;

  public static final int PROBB_FIELD_NUMBER = 9;
  @SuppressWarnings("serial")
  private com.google.protobuf.Internal.DoubleList probB_ =
      emptyDoubleList();
  /**
   * <code>repeated double probB = 9;</code>
   * @return A list containing the probB.
   */
  @java.lang.Override
  public java.util.List<java.lang.Double>
      getProbBList() {
    return probB_;
  }
  /**
   * <code>repeated double probB = 9;</code>
   * @return The count of probB.
   */
  public int getProbBCount() {
    return probB_.size();
  }
  /**
   * <code>repeated double probB = 9;</code>
   * @param index The index of the element to return.
   * @return The probB at the given index.
   */
  public double getProbB(int index) {
    return probB_.getDouble(index);
  }
  private int probBMemoizedSerializedSize = -1;

  public static final int SV_INDICES_FIELD_NUMBER = 10;
  @SuppressWarnings("serial")
  private com.google.protobuf.Internal.IntList svIndices_ =
      emptyIntList();
  /**
   * <code>repeated int32 sv_indices = 10;</code>
   * @return A list containing the svIndices.
   */
  @java.lang.Override
  public java.util.List<java.lang.Integer>
      getSvIndicesList() {
    return svIndices_;
  }
  /**
   * <code>repeated int32 sv_indices = 10;</code>
   * @return The count of svIndices.
   */
  public int getSvIndicesCount() {
    return svIndices_.size();
  }
  /**
   * <code>repeated int32 sv_indices = 10;</code>
   * @param index The index of the element to return.
   * @return The svIndices at the given index.
   */
  public int getSvIndices(int index) {
    return svIndices_.getInt(index);
  }
  private int svIndicesMemoizedSerializedSize = -1;

  public static final int LABEL_FIELD_NUMBER = 11;
  @SuppressWarnings("serial")
  private com.google.protobuf.Internal.IntList label_ =
      emptyIntList();
  /**
   * <code>repeated int32 label = 11;</code>
   * @return A list containing the label.
   */
  @java.lang.Override
  public java.util.List<java.lang.Integer>
      getLabelList() {
    return label_;
  }
  /**
   * <code>repeated int32 label = 11;</code>
   * @return The count of label.
   */
  public int getLabelCount() {
    return label_.size();
  }
  /**
   * <code>repeated int32 label = 11;</code>
   * @param index The index of the element to return.
   * @return The label at the given index.
   */
  public int getLabel(int index) {
    return label_.getInt(index);
  }
  private int labelMemoizedSerializedSize = -1;

  public static final int NSV_FIELD_NUMBER = 12;
  @SuppressWarnings("serial")
  private com.google.protobuf.Internal.IntList nSV_ =
      emptyIntList();
  /**
   * <code>repeated int32 nSV = 12;</code>
   * @return A list containing the nSV.
   */
  @java.lang.Override
  public java.util.List<java.lang.Integer>
      getNSVList() {
    return nSV_;
  }
  /**
   * <code>repeated int32 nSV = 12;</code>
   * @return The count of nSV.
   */
  public int getNSVCount() {
    return nSV_.size();
  }
  /**
   * <code>repeated int32 nSV = 12;</code>
   * @param index The index of the element to return.
   * @return The nSV at the given index.
   */
  public int getNSV(int index) {
    return nSV_.getInt(index);
  }
  private int nSVMemoizedSerializedSize = -1;

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    getSerializedSize();
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeMessage(1, getParam());
    }
    if (nrClass_ != 0) {
      output.writeInt32(2, nrClass_);
    }
    if (l_ != 0) {
      output.writeInt32(3, l_);
    }
    for (int i = 0; i < sV_.size(); i++) {
      output.writeMessage(4, sV_.get(i));
    }
    if (getSvCoefLengthsList().size() > 0) {
      output.writeUInt32NoTag(42);
      output.writeUInt32NoTag(svCoefLengthsMemoizedSerializedSize);
    }
    for (int i = 0; i < svCoefLengths_.size(); i++) {
      output.writeInt32NoTag(svCoefLengths_.getInt(i));
    }
    if (getSvCoefList().size() > 0) {
      output.writeUInt32NoTag(50);
      output.writeUInt32NoTag(svCoefMemoizedSerializedSize);
    }
    for (int i = 0; i < svCoef_.size(); i++) {
      output.writeDoubleNoTag(svCoef_.getDouble(i));
    }
    if (getRhoList().size() > 0) {
      output.writeUInt32NoTag(58);
      output.writeUInt32NoTag(rhoMemoizedSerializedSize);
    }
    for (int i = 0; i < rho_.size(); i++) {
      output.writeDoubleNoTag(rho_.getDouble(i));
    }
    if (getProbAList().size() > 0) {
      output.writeUInt32NoTag(66);
      output.writeUInt32NoTag(probAMemoizedSerializedSize);
    }
    for (int i = 0; i < probA_.size(); i++) {
      output.writeDoubleNoTag(probA_.getDouble(i));
    }
    if (getProbBList().size() > 0) {
      output.writeUInt32NoTag(74);
      output.writeUInt32NoTag(probBMemoizedSerializedSize);
    }
    for (int i = 0; i < probB_.size(); i++) {
      output.writeDoubleNoTag(probB_.getDouble(i));
    }
    if (getSvIndicesList().size() > 0) {
      output.writeUInt32NoTag(82);
      output.writeUInt32NoTag(svIndicesMemoizedSerializedSize);
    }
    for (int i = 0; i < svIndices_.size(); i++) {
      output.writeInt32NoTag(svIndices_.getInt(i));
    }
    if (getLabelList().size() > 0) {
      output.writeUInt32NoTag(90);
      output.writeUInt32NoTag(labelMemoizedSerializedSize);
    }
    for (int i = 0; i < label_.size(); i++) {
      output.writeInt32NoTag(label_.getInt(i));
    }
    if (getNSVList().size() > 0) {
      output.writeUInt32NoTag(98);
      output.writeUInt32NoTag(nSVMemoizedSerializedSize);
    }
    for (int i = 0; i < nSV_.size(); i++) {
      output.writeInt32NoTag(nSV_.getInt(i));
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getParam());
    }
    if (nrClass_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(2, nrClass_);
    }
    if (l_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(3, l_);
    }
    for (int i = 0; i < sV_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, sV_.get(i));
    }
    {
      int dataSize = 0;
      for (int i = 0; i < svCoefLengths_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream
          .computeInt32SizeNoTag(svCoefLengths_.getInt(i));
      }
      size += dataSize;
      if (!getSvCoefLengthsList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      svCoefLengthsMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 8 * getSvCoefList().size();
      size += dataSize;
      if (!getSvCoefList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      svCoefMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 8 * getRhoList().size();
      size += dataSize;
      if (!getRhoList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      rhoMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 8 * getProbAList().size();
      size += dataSize;
      if (!getProbAList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      probAMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 8 * getProbBList().size();
      size += dataSize;
      if (!getProbBList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      probBMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      for (int i = 0; i < svIndices_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream
          .computeInt32SizeNoTag(svIndices_.getInt(i));
      }
      size += dataSize;
      if (!getSvIndicesList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      svIndicesMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      for (int i = 0; i < label_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream
          .computeInt32SizeNoTag(label_.getInt(i));
      }
      size += dataSize;
      if (!getLabelList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      labelMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      for (int i = 0; i < nSV_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream
          .computeInt32SizeNoTag(nSV_.getInt(i));
      }
      size += dataSize;
      if (!getNSVList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      nSVMemoizedSerializedSize = dataSize;
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof org.tribuo.common.libsvm.protos.SVMModelProto)) {
      return super.equals(obj);
    }
    org.tribuo.common.libsvm.protos.SVMModelProto other = (org.tribuo.common.libsvm.protos.SVMModelProto) obj;

    if (hasParam() != other.hasParam()) return false;
    if (hasParam()) {
      if (!getParam()
          .equals(other.getParam())) return false;
    }
    if (getNrClass()
        != other.getNrClass()) return false;
    if (getL()
        != other.getL()) return false;
    if (!getSVList()
        .equals(other.getSVList())) return false;
    if (!getSvCoefLengthsList()
        .equals(other.getSvCoefLengthsList())) return false;
    if (!getSvCoefList()
        .equals(other.getSvCoefList())) return false;
    if (!getRhoList()
        .equals(other.getRhoList())) return false;
    if (!getProbAList()
        .equals(other.getProbAList())) return false;
    if (!getProbBList()
        .equals(other.getProbBList())) return false;
    if (!getSvIndicesList()
        .equals(other.getSvIndicesList())) return false;
    if (!getLabelList()
        .equals(other.getLabelList())) return false;
    if (!getNSVList()
        .equals(other.getNSVList())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasParam()) {
      hash = (37 * hash) + PARAM_FIELD_NUMBER;
      hash = (53 * hash) + getParam().hashCode();
    }
    hash = (37 * hash) + NR_CLASS_FIELD_NUMBER;
    hash = (53 * hash) + getNrClass();
    hash = (37 * hash) + L_FIELD_NUMBER;
    hash = (53 * hash) + getL();
    if (getSVCount() > 0) {
      hash = (37 * hash) + SV_FIELD_NUMBER;
      hash = (53 * hash) + getSVList().hashCode();
    }
    if (getSvCoefLengthsCount() > 0) {
      hash = (37 * hash) + SV_COEF_LENGTHS_FIELD_NUMBER;
      hash = (53 * hash) + getSvCoefLengthsList().hashCode();
    }
    if (getSvCoefCount() > 0) {
      hash = (37 * hash) + SV_COEF_FIELD_NUMBER;
      hash = (53 * hash) + getSvCoefList().hashCode();
    }
    if (getRhoCount() > 0) {
      hash = (37 * hash) + RHO_FIELD_NUMBER;
      hash = (53 * hash) + getRhoList().hashCode();
    }
    if (getProbACount() > 0) {
      hash = (37 * hash) + PROBA_FIELD_NUMBER;
      hash = (53 * hash) + getProbAList().hashCode();
    }
    if (getProbBCount() > 0) {
      hash = (37 * hash) + PROBB_FIELD_NUMBER;
      hash = (53 * hash) + getProbBList().hashCode();
    }
    if (getSvIndicesCount() > 0) {
      hash = (37 * hash) + SV_INDICES_FIELD_NUMBER;
      hash = (53 * hash) + getSvIndicesList().hashCode();
    }
    if (getLabelCount() > 0) {
      hash = (37 * hash) + LABEL_FIELD_NUMBER;
      hash = (53 * hash) + getLabelList().hashCode();
    }
    if (getNSVCount() > 0) {
      hash = (37 * hash) + NSV_FIELD_NUMBER;
      hash = (53 * hash) + getNSVList().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.tribuo.common.libsvm.protos.SVMModelProto parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.tribuo.common.libsvm.protos.SVMModelProto parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.tribuo.common.libsvm.protos.SVMModelProto parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.tribuo.common.libsvm.protos.SVMModelProto parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.tribuo.common.libsvm.protos.SVMModelProto parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.tribuo.common.libsvm.protos.SVMModelProto parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.tribuo.common.libsvm.protos.SVMModelProto parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.tribuo.common.libsvm.protos.SVMModelProto parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static org.tribuo.common.libsvm.protos.SVMModelProto parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static org.tribuo.common.libsvm.protos.SVMModelProto parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.tribuo.common.libsvm.protos.SVMModelProto parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.tribuo.common.libsvm.protos.SVMModelProto parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.tribuo.common.libsvm.protos.SVMModelProto prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   *
   *svm_model proto
   * </pre>
   *
   * Protobuf type {@code tribuo.common.libsvm.SVMModelProto}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:tribuo.common.libsvm.SVMModelProto)
      org.tribuo.common.libsvm.protos.SVMModelProtoOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.tribuo.common.libsvm.protos.TribuoLibsvm.internal_static_tribuo_common_libsvm_SVMModelProto_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.tribuo.common.libsvm.protos.TribuoLibsvm.internal_static_tribuo_common_libsvm_SVMModelProto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.tribuo.common.libsvm.protos.SVMModelProto.class, org.tribuo.common.libsvm.protos.SVMModelProto.Builder.class);
    }

    // Construct using org.tribuo.common.libsvm.protos.SVMModelProto.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getParamFieldBuilder();
        getSVFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      param_ = null;
      if (paramBuilder_ != null) {
        paramBuilder_.dispose();
        paramBuilder_ = null;
      }
      nrClass_ = 0;
      l_ = 0;
      if (sVBuilder_ == null) {
        sV_ = java.util.Collections.emptyList();
      } else {
        sV_ = null;
        sVBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000008);
      svCoefLengths_ = emptyIntList();
      svCoef_ = emptyDoubleList();
      rho_ = emptyDoubleList();
      probA_ = emptyDoubleList();
      probB_ = emptyDoubleList();
      svIndices_ = emptyIntList();
      label_ = emptyIntList();
      nSV_ = emptyIntList();
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return org.tribuo.common.libsvm.protos.TribuoLibsvm.internal_static_tribuo_common_libsvm_SVMModelProto_descriptor;
    }

    @java.lang.Override
    public org.tribuo.common.libsvm.protos.SVMModelProto getDefaultInstanceForType() {
      return org.tribuo.common.libsvm.protos.SVMModelProto.getDefaultInstance();
    }

    @java.lang.Override
    public org.tribuo.common.libsvm.protos.SVMModelProto build() {
      org.tribuo.common.libsvm.protos.SVMModelProto result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public org.tribuo.common.libsvm.protos.SVMModelProto buildPartial() {
      org.tribuo.common.libsvm.protos.SVMModelProto result = new org.tribuo.common.libsvm.protos.SVMModelProto(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(org.tribuo.common.libsvm.protos.SVMModelProto result) {
      if (sVBuilder_ == null) {
        if (((bitField0_ & 0x00000008) != 0)) {
          sV_ = java.util.Collections.unmodifiableList(sV_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.sV_ = sV_;
      } else {
        result.sV_ = sVBuilder_.build();
      }
    }

    private void buildPartial0(org.tribuo.common.libsvm.protos.SVMModelProto result) {
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.param_ = paramBuilder_ == null
            ? param_
            : paramBuilder_.build();
        to_bitField0_ |= 0x00000001;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.nrClass_ = nrClass_;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.l_ = l_;
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        svCoefLengths_.makeImmutable();
        result.svCoefLengths_ = svCoefLengths_;
      }
      if (((from_bitField0_ & 0x00000020) != 0)) {
        svCoef_.makeImmutable();
        result.svCoef_ = svCoef_;
      }
      if (((from_bitField0_ & 0x00000040) != 0)) {
        rho_.makeImmutable();
        result.rho_ = rho_;
      }
      if (((from_bitField0_ & 0x00000080) != 0)) {
        probA_.makeImmutable();
        result.probA_ = probA_;
      }
      if (((from_bitField0_ & 0x00000100) != 0)) {
        probB_.makeImmutable();
        result.probB_ = probB_;
      }
      if (((from_bitField0_ & 0x00000200) != 0)) {
        svIndices_.makeImmutable();
        result.svIndices_ = svIndices_;
      }
      if (((from_bitField0_ & 0x00000400) != 0)) {
        label_.makeImmutable();
        result.label_ = label_;
      }
      if (((from_bitField0_ & 0x00000800) != 0)) {
        nSV_.makeImmutable();
        result.nSV_ = nSV_;
      }
      result.bitField0_ |= to_bitField0_;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof org.tribuo.common.libsvm.protos.SVMModelProto) {
        return mergeFrom((org.tribuo.common.libsvm.protos.SVMModelProto)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.tribuo.common.libsvm.protos.SVMModelProto other) {
      if (other == org.tribuo.common.libsvm.protos.SVMModelProto.getDefaultInstance()) return this;
      if (other.hasParam()) {
        mergeParam(other.getParam());
      }
      if (other.getNrClass() != 0) {
        setNrClass(other.getNrClass());
      }
      if (other.getL() != 0) {
        setL(other.getL());
      }
      if (sVBuilder_ == null) {
        if (!other.sV_.isEmpty()) {
          if (sV_.isEmpty()) {
            sV_ = other.sV_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureSVIsMutable();
            sV_.addAll(other.sV_);
          }
          onChanged();
        }
      } else {
        if (!other.sV_.isEmpty()) {
          if (sVBuilder_.isEmpty()) {
            sVBuilder_.dispose();
            sVBuilder_ = null;
            sV_ = other.sV_;
            bitField0_ = (bitField0_ & ~0x00000008);
            sVBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getSVFieldBuilder() : null;
          } else {
            sVBuilder_.addAllMessages(other.sV_);
          }
        }
      }
      if (!other.svCoefLengths_.isEmpty()) {
        if (svCoefLengths_.isEmpty()) {
          svCoefLengths_ = other.svCoefLengths_;
          svCoefLengths_.makeImmutable();
          bitField0_ |= 0x00000010;
        } else {
          ensureSvCoefLengthsIsMutable();
          svCoefLengths_.addAll(other.svCoefLengths_);
        }
        onChanged();
      }
      if (!other.svCoef_.isEmpty()) {
        if (svCoef_.isEmpty()) {
          svCoef_ = other.svCoef_;
          svCoef_.makeImmutable();
          bitField0_ |= 0x00000020;
        } else {
          ensureSvCoefIsMutable();
          svCoef_.addAll(other.svCoef_);
        }
        onChanged();
      }
      if (!other.rho_.isEmpty()) {
        if (rho_.isEmpty()) {
          rho_ = other.rho_;
          rho_.makeImmutable();
          bitField0_ |= 0x00000040;
        } else {
          ensureRhoIsMutable();
          rho_.addAll(other.rho_);
        }
        onChanged();
      }
      if (!other.probA_.isEmpty()) {
        if (probA_.isEmpty()) {
          probA_ = other.probA_;
          probA_.makeImmutable();
          bitField0_ |= 0x00000080;
        } else {
          ensureProbAIsMutable();
          probA_.addAll(other.probA_);
        }
        onChanged();
      }
      if (!other.probB_.isEmpty()) {
        if (probB_.isEmpty()) {
          probB_ = other.probB_;
          probB_.makeImmutable();
          bitField0_ |= 0x00000100;
        } else {
          ensureProbBIsMutable();
          probB_.addAll(other.probB_);
        }
        onChanged();
      }
      if (!other.svIndices_.isEmpty()) {
        if (svIndices_.isEmpty()) {
          svIndices_ = other.svIndices_;
          svIndices_.makeImmutable();
          bitField0_ |= 0x00000200;
        } else {
          ensureSvIndicesIsMutable();
          svIndices_.addAll(other.svIndices_);
        }
        onChanged();
      }
      if (!other.label_.isEmpty()) {
        if (label_.isEmpty()) {
          label_ = other.label_;
          label_.makeImmutable();
          bitField0_ |= 0x00000400;
        } else {
          ensureLabelIsMutable();
          label_.addAll(other.label_);
        }
        onChanged();
      }
      if (!other.nSV_.isEmpty()) {
        if (nSV_.isEmpty()) {
          nSV_ = other.nSV_;
          nSV_.makeImmutable();
          bitField0_ |= 0x00000800;
        } else {
          ensureNSVIsMutable();
          nSV_.addAll(other.nSV_);
        }
        onChanged();
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getParamFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 16: {
              nrClass_ = input.readInt32();
              bitField0_ |= 0x00000002;
              break;
            } // case 16
            case 24: {
              l_ = input.readInt32();
              bitField0_ |= 0x00000004;
              break;
            } // case 24
            case 34: {
              org.tribuo.common.libsvm.protos.SVMNodeArrayProto m =
                  input.readMessage(
                      org.tribuo.common.libsvm.protos.SVMNodeArrayProto.parser(),
                      extensionRegistry);
              if (sVBuilder_ == null) {
                ensureSVIsMutable();
                sV_.add(m);
              } else {
                sVBuilder_.addMessage(m);
              }
              break;
            } // case 34
            case 40: {
              int v = input.readInt32();
              ensureSvCoefLengthsIsMutable();
              svCoefLengths_.addInt(v);
              break;
            } // case 40
            case 42: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              ensureSvCoefLengthsIsMutable();
              while (input.getBytesUntilLimit() > 0) {
                svCoefLengths_.addInt(input.readInt32());
              }
              input.popLimit(limit);
              break;
            } // case 42
            case 49: {
              double v = input.readDouble();
              ensureSvCoefIsMutable();
              svCoef_.addDouble(v);
              break;
            } // case 49
            case 50: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              int alloc = length > 4096 ? 4096 : length;
              ensureSvCoefIsMutable(alloc / 8);
              while (input.getBytesUntilLimit() > 0) {
                svCoef_.addDouble(input.readDouble());
              }
              input.popLimit(limit);
              break;
            } // case 50
            case 57: {
              double v = input.readDouble();
              ensureRhoIsMutable();
              rho_.addDouble(v);
              break;
            } // case 57
            case 58: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              int alloc = length > 4096 ? 4096 : length;
              ensureRhoIsMutable(alloc / 8);
              while (input.getBytesUntilLimit() > 0) {
                rho_.addDouble(input.readDouble());
              }
              input.popLimit(limit);
              break;
            } // case 58
            case 65: {
              double v = input.readDouble();
              ensureProbAIsMutable();
              probA_.addDouble(v);
              break;
            } // case 65
            case 66: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              int alloc = length > 4096 ? 4096 : length;
              ensureProbAIsMutable(alloc / 8);
              while (input.getBytesUntilLimit() > 0) {
                probA_.addDouble(input.readDouble());
              }
              input.popLimit(limit);
              break;
            } // case 66
            case 73: {
              double v = input.readDouble();
              ensureProbBIsMutable();
              probB_.addDouble(v);
              break;
            } // case 73
            case 74: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              int alloc = length > 4096 ? 4096 : length;
              ensureProbBIsMutable(alloc / 8);
              while (input.getBytesUntilLimit() > 0) {
                probB_.addDouble(input.readDouble());
              }
              input.popLimit(limit);
              break;
            } // case 74
            case 80: {
              int v = input.readInt32();
              ensureSvIndicesIsMutable();
              svIndices_.addInt(v);
              break;
            } // case 80
            case 82: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              ensureSvIndicesIsMutable();
              while (input.getBytesUntilLimit() > 0) {
                svIndices_.addInt(input.readInt32());
              }
              input.popLimit(limit);
              break;
            } // case 82
            case 88: {
              int v = input.readInt32();
              ensureLabelIsMutable();
              label_.addInt(v);
              break;
            } // case 88
            case 90: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              ensureLabelIsMutable();
              while (input.getBytesUntilLimit() > 0) {
                label_.addInt(input.readInt32());
              }
              input.popLimit(limit);
              break;
            } // case 90
            case 96: {
              int v = input.readInt32();
              ensureNSVIsMutable();
              nSV_.addInt(v);
              break;
            } // case 96
            case 98: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              ensureNSVIsMutable();
              while (input.getBytesUntilLimit() > 0) {
                nSV_.addInt(input.readInt32());
              }
              input.popLimit(limit);
              break;
            } // case 98
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private org.tribuo.common.libsvm.protos.SVMParameterProto param_;
    private com.google.protobuf.SingleFieldBuilderV3<
        org.tribuo.common.libsvm.protos.SVMParameterProto, org.tribuo.common.libsvm.protos.SVMParameterProto.Builder, org.tribuo.common.libsvm.protos.SVMParameterProtoOrBuilder> paramBuilder_;
    /**
     * <code>.tribuo.common.libsvm.SVMParameterProto param = 1;</code>
     * @return Whether the param field is set.
     */
    public boolean hasParam() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>.tribuo.common.libsvm.SVMParameterProto param = 1;</code>
     * @return The param.
     */
    public org.tribuo.common.libsvm.protos.SVMParameterProto getParam() {
      if (paramBuilder_ == null) {
        return param_ == null ? org.tribuo.common.libsvm.protos.SVMParameterProto.getDefaultInstance() : param_;
      } else {
        return paramBuilder_.getMessage();
      }
    }
    /**
     * <code>.tribuo.common.libsvm.SVMParameterProto param = 1;</code>
     */
    public Builder setParam(org.tribuo.common.libsvm.protos.SVMParameterProto value) {
      if (paramBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        param_ = value;
      } else {
        paramBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <code>.tribuo.common.libsvm.SVMParameterProto param = 1;</code>
     */
    public Builder setParam(
        org.tribuo.common.libsvm.protos.SVMParameterProto.Builder builderForValue) {
      if (paramBuilder_ == null) {
        param_ = builderForValue.build();
      } else {
        paramBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <code>.tribuo.common.libsvm.SVMParameterProto param = 1;</code>
     */
    public Builder mergeParam(org.tribuo.common.libsvm.protos.SVMParameterProto value) {
      if (paramBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0) &&
          param_ != null &&
          param_ != org.tribuo.common.libsvm.protos.SVMParameterProto.getDefaultInstance()) {
          getParamBuilder().mergeFrom(value);
        } else {
          param_ = value;
        }
      } else {
        paramBuilder_.mergeFrom(value);
      }
      if (param_ != null) {
        bitField0_ |= 0x00000001;
        onChanged();
      }
      return this;
    }
    /**
     * <code>.tribuo.common.libsvm.SVMParameterProto param = 1;</code>
     */
    public Builder clearParam() {
      bitField0_ = (bitField0_ & ~0x00000001);
      param_ = null;
      if (paramBuilder_ != null) {
        paramBuilder_.dispose();
        paramBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <code>.tribuo.common.libsvm.SVMParameterProto param = 1;</code>
     */
    public org.tribuo.common.libsvm.protos.SVMParameterProto.Builder getParamBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getParamFieldBuilder().getBuilder();
    }
    /**
     * <code>.tribuo.common.libsvm.SVMParameterProto param = 1;</code>
     */
    public org.tribuo.common.libsvm.protos.SVMParameterProtoOrBuilder getParamOrBuilder() {
      if (paramBuilder_ != null) {
        return paramBuilder_.getMessageOrBuilder();
      } else {
        return param_ == null ?
            org.tribuo.common.libsvm.protos.SVMParameterProto.getDefaultInstance() : param_;
      }
    }
    /**
     * <code>.tribuo.common.libsvm.SVMParameterProto param = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.tribuo.common.libsvm.protos.SVMParameterProto, org.tribuo.common.libsvm.protos.SVMParameterProto.Builder, org.tribuo.common.libsvm.protos.SVMParameterProtoOrBuilder> 
        getParamFieldBuilder() {
      if (paramBuilder_ == null) {
        paramBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.tribuo.common.libsvm.protos.SVMParameterProto, org.tribuo.common.libsvm.protos.SVMParameterProto.Builder, org.tribuo.common.libsvm.protos.SVMParameterProtoOrBuilder>(
                getParam(),
                getParentForChildren(),
                isClean());
        param_ = null;
      }
      return paramBuilder_;
    }

    private int nrClass_ ;
    /**
     * <code>int32 nr_class = 2;</code>
     * @return The nrClass.
     */
    @java.lang.Override
    public int getNrClass() {
      return nrClass_;
    }
    /**
     * <code>int32 nr_class = 2;</code>
     * @param value The nrClass to set.
     * @return This builder for chaining.
     */
    public Builder setNrClass(int value) {

      nrClass_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <code>int32 nr_class = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearNrClass() {
      bitField0_ = (bitField0_ & ~0x00000002);
      nrClass_ = 0;
      onChanged();
      return this;
    }

    private int l_ ;
    /**
     * <code>int32 l = 3;</code>
     * @return The l.
     */
    @java.lang.Override
    public int getL() {
      return l_;
    }
    /**
     * <code>int32 l = 3;</code>
     * @param value The l to set.
     * @return This builder for chaining.
     */
    public Builder setL(int value) {

      l_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <code>int32 l = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearL() {
      bitField0_ = (bitField0_ & ~0x00000004);
      l_ = 0;
      onChanged();
      return this;
    }

    private java.util.List<org.tribuo.common.libsvm.protos.SVMNodeArrayProto> sV_ =
      java.util.Collections.emptyList();
    private void ensureSVIsMutable() {
      if (!((bitField0_ & 0x00000008) != 0)) {
        sV_ = new java.util.ArrayList<org.tribuo.common.libsvm.protos.SVMNodeArrayProto>(sV_);
        bitField0_ |= 0x00000008;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        org.tribuo.common.libsvm.protos.SVMNodeArrayProto, org.tribuo.common.libsvm.protos.SVMNodeArrayProto.Builder, org.tribuo.common.libsvm.protos.SVMNodeArrayProtoOrBuilder> sVBuilder_;

    /**
     * <code>repeated .tribuo.common.libsvm.SVMNodeArrayProto SV = 4;</code>
     */
    public java.util.List<org.tribuo.common.libsvm.protos.SVMNodeArrayProto> getSVList() {
      if (sVBuilder_ == null) {
        return java.util.Collections.unmodifiableList(sV_);
      } else {
        return sVBuilder_.getMessageList();
      }
    }
    /**
     * <code>repeated .tribuo.common.libsvm.SVMNodeArrayProto SV = 4;</code>
     */
    public int getSVCount() {
      if (sVBuilder_ == null) {
        return sV_.size();
      } else {
        return sVBuilder_.getCount();
      }
    }
    /**
     * <code>repeated .tribuo.common.libsvm.SVMNodeArrayProto SV = 4;</code>
     */
    public org.tribuo.common.libsvm.protos.SVMNodeArrayProto getSV(int index) {
      if (sVBuilder_ == null) {
        return sV_.get(index);
      } else {
        return sVBuilder_.getMessage(index);
      }
    }
    /**
     * <code>repeated .tribuo.common.libsvm.SVMNodeArrayProto SV = 4;</code>
     */
    public Builder setSV(
        int index, org.tribuo.common.libsvm.protos.SVMNodeArrayProto value) {
      if (sVBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSVIsMutable();
        sV_.set(index, value);
        onChanged();
      } else {
        sVBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .tribuo.common.libsvm.SVMNodeArrayProto SV = 4;</code>
     */
    public Builder setSV(
        int index, org.tribuo.common.libsvm.protos.SVMNodeArrayProto.Builder builderForValue) {
      if (sVBuilder_ == null) {
        ensureSVIsMutable();
        sV_.set(index, builderForValue.build());
        onChanged();
      } else {
        sVBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .tribuo.common.libsvm.SVMNodeArrayProto SV = 4;</code>
     */
    public Builder addSV(org.tribuo.common.libsvm.protos.SVMNodeArrayProto value) {
      if (sVBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSVIsMutable();
        sV_.add(value);
        onChanged();
      } else {
        sVBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <code>repeated .tribuo.common.libsvm.SVMNodeArrayProto SV = 4;</code>
     */
    public Builder addSV(
        int index, org.tribuo.common.libsvm.protos.SVMNodeArrayProto value) {
      if (sVBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSVIsMutable();
        sV_.add(index, value);
        onChanged();
      } else {
        sVBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .tribuo.common.libsvm.SVMNodeArrayProto SV = 4;</code>
     */
    public Builder addSV(
        org.tribuo.common.libsvm.protos.SVMNodeArrayProto.Builder builderForValue) {
      if (sVBuilder_ == null) {
        ensureSVIsMutable();
        sV_.add(builderForValue.build());
        onChanged();
      } else {
        sVBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .tribuo.common.libsvm.SVMNodeArrayProto SV = 4;</code>
     */
    public Builder addSV(
        int index, org.tribuo.common.libsvm.protos.SVMNodeArrayProto.Builder builderForValue) {
      if (sVBuilder_ == null) {
        ensureSVIsMutable();
        sV_.add(index, builderForValue.build());
        onChanged();
      } else {
        sVBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .tribuo.common.libsvm.SVMNodeArrayProto SV = 4;</code>
     */
    public Builder addAllSV(
        java.lang.Iterable<? extends org.tribuo.common.libsvm.protos.SVMNodeArrayProto> values) {
      if (sVBuilder_ == null) {
        ensureSVIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, sV_);
        onChanged();
      } else {
        sVBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <code>repeated .tribuo.common.libsvm.SVMNodeArrayProto SV = 4;</code>
     */
    public Builder clearSV() {
      if (sVBuilder_ == null) {
        sV_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
      } else {
        sVBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>repeated .tribuo.common.libsvm.SVMNodeArrayProto SV = 4;</code>
     */
    public Builder removeSV(int index) {
      if (sVBuilder_ == null) {
        ensureSVIsMutable();
        sV_.remove(index);
        onChanged();
      } else {
        sVBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <code>repeated .tribuo.common.libsvm.SVMNodeArrayProto SV = 4;</code>
     */
    public org.tribuo.common.libsvm.protos.SVMNodeArrayProto.Builder getSVBuilder(
        int index) {
      return getSVFieldBuilder().getBuilder(index);
    }
    /**
     * <code>repeated .tribuo.common.libsvm.SVMNodeArrayProto SV = 4;</code>
     */
    public org.tribuo.common.libsvm.protos.SVMNodeArrayProtoOrBuilder getSVOrBuilder(
        int index) {
      if (sVBuilder_ == null) {
        return sV_.get(index);  } else {
        return sVBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <code>repeated .tribuo.common.libsvm.SVMNodeArrayProto SV = 4;</code>
     */
    public java.util.List<? extends org.tribuo.common.libsvm.protos.SVMNodeArrayProtoOrBuilder> 
         getSVOrBuilderList() {
      if (sVBuilder_ != null) {
        return sVBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(sV_);
      }
    }
    /**
     * <code>repeated .tribuo.common.libsvm.SVMNodeArrayProto SV = 4;</code>
     */
    public org.tribuo.common.libsvm.protos.SVMNodeArrayProto.Builder addSVBuilder() {
      return getSVFieldBuilder().addBuilder(
          org.tribuo.common.libsvm.protos.SVMNodeArrayProto.getDefaultInstance());
    }
    /**
     * <code>repeated .tribuo.common.libsvm.SVMNodeArrayProto SV = 4;</code>
     */
    public org.tribuo.common.libsvm.protos.SVMNodeArrayProto.Builder addSVBuilder(
        int index) {
      return getSVFieldBuilder().addBuilder(
          index, org.tribuo.common.libsvm.protos.SVMNodeArrayProto.getDefaultInstance());
    }
    /**
     * <code>repeated .tribuo.common.libsvm.SVMNodeArrayProto SV = 4;</code>
     */
    public java.util.List<org.tribuo.common.libsvm.protos.SVMNodeArrayProto.Builder> 
         getSVBuilderList() {
      return getSVFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        org.tribuo.common.libsvm.protos.SVMNodeArrayProto, org.tribuo.common.libsvm.protos.SVMNodeArrayProto.Builder, org.tribuo.common.libsvm.protos.SVMNodeArrayProtoOrBuilder> 
        getSVFieldBuilder() {
      if (sVBuilder_ == null) {
        sVBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            org.tribuo.common.libsvm.protos.SVMNodeArrayProto, org.tribuo.common.libsvm.protos.SVMNodeArrayProto.Builder, org.tribuo.common.libsvm.protos.SVMNodeArrayProtoOrBuilder>(
                sV_,
                ((bitField0_ & 0x00000008) != 0),
                getParentForChildren(),
                isClean());
        sV_ = null;
      }
      return sVBuilder_;
    }

    private com.google.protobuf.Internal.IntList svCoefLengths_ = emptyIntList();
    private void ensureSvCoefLengthsIsMutable() {
      if (!svCoefLengths_.isModifiable()) {
        svCoefLengths_ = makeMutableCopy(svCoefLengths_);
      }
      bitField0_ |= 0x00000010;
    }
    /**
     * <code>repeated int32 sv_coef_lengths = 5;</code>
     * @return A list containing the svCoefLengths.
     */
    public java.util.List<java.lang.Integer>
        getSvCoefLengthsList() {
      svCoefLengths_.makeImmutable();
      return svCoefLengths_;
    }
    /**
     * <code>repeated int32 sv_coef_lengths = 5;</code>
     * @return The count of svCoefLengths.
     */
    public int getSvCoefLengthsCount() {
      return svCoefLengths_.size();
    }
    /**
     * <code>repeated int32 sv_coef_lengths = 5;</code>
     * @param index The index of the element to return.
     * @return The svCoefLengths at the given index.
     */
    public int getSvCoefLengths(int index) {
      return svCoefLengths_.getInt(index);
    }
    /**
     * <code>repeated int32 sv_coef_lengths = 5;</code>
     * @param index The index to set the value at.
     * @param value The svCoefLengths to set.
     * @return This builder for chaining.
     */
    public Builder setSvCoefLengths(
        int index, int value) {

      ensureSvCoefLengthsIsMutable();
      svCoefLengths_.setInt(index, value);
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <code>repeated int32 sv_coef_lengths = 5;</code>
     * @param value The svCoefLengths to add.
     * @return This builder for chaining.
     */
    public Builder addSvCoefLengths(int value) {

      ensureSvCoefLengthsIsMutable();
      svCoefLengths_.addInt(value);
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <code>repeated int32 sv_coef_lengths = 5;</code>
     * @param values The svCoefLengths to add.
     * @return This builder for chaining.
     */
    public Builder addAllSvCoefLengths(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureSvCoefLengthsIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, svCoefLengths_);
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <code>repeated int32 sv_coef_lengths = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearSvCoefLengths() {
      svCoefLengths_ = emptyIntList();
      bitField0_ = (bitField0_ & ~0x00000010);
      onChanged();
      return this;
    }

    private com.google.protobuf.Internal.DoubleList svCoef_ = emptyDoubleList();
    private void ensureSvCoefIsMutable() {
      if (!svCoef_.isModifiable()) {
        svCoef_ = makeMutableCopy(svCoef_);
      }
      bitField0_ |= 0x00000020;
    }
    private void ensureSvCoefIsMutable(int capacity) {
      if (!svCoef_.isModifiable()) {
        svCoef_ = makeMutableCopy(svCoef_, capacity);
      }
      bitField0_ |= 0x00000020;
    }
    /**
     * <code>repeated double sv_coef = 6;</code>
     * @return A list containing the svCoef.
     */
    public java.util.List<java.lang.Double>
        getSvCoefList() {
      svCoef_.makeImmutable();
      return svCoef_;
    }
    /**
     * <code>repeated double sv_coef = 6;</code>
     * @return The count of svCoef.
     */
    public int getSvCoefCount() {
      return svCoef_.size();
    }
    /**
     * <code>repeated double sv_coef = 6;</code>
     * @param index The index of the element to return.
     * @return The svCoef at the given index.
     */
    public double getSvCoef(int index) {
      return svCoef_.getDouble(index);
    }
    /**
     * <code>repeated double sv_coef = 6;</code>
     * @param index The index to set the value at.
     * @param value The svCoef to set.
     * @return This builder for chaining.
     */
    public Builder setSvCoef(
        int index, double value) {

      ensureSvCoefIsMutable();
      svCoef_.setDouble(index, value);
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <code>repeated double sv_coef = 6;</code>
     * @param value The svCoef to add.
     * @return This builder for chaining.
     */
    public Builder addSvCoef(double value) {

      ensureSvCoefIsMutable();
      svCoef_.addDouble(value);
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <code>repeated double sv_coef = 6;</code>
     * @param values The svCoef to add.
     * @return This builder for chaining.
     */
    public Builder addAllSvCoef(
        java.lang.Iterable<? extends java.lang.Double> values) {
      ensureSvCoefIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, svCoef_);
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <code>repeated double sv_coef = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearSvCoef() {
      svCoef_ = emptyDoubleList();
      bitField0_ = (bitField0_ & ~0x00000020);
      onChanged();
      return this;
    }

    private com.google.protobuf.Internal.DoubleList rho_ = emptyDoubleList();
    private void ensureRhoIsMutable() {
      if (!rho_.isModifiable()) {
        rho_ = makeMutableCopy(rho_);
      }
      bitField0_ |= 0x00000040;
    }
    private void ensureRhoIsMutable(int capacity) {
      if (!rho_.isModifiable()) {
        rho_ = makeMutableCopy(rho_, capacity);
      }
      bitField0_ |= 0x00000040;
    }
    /**
     * <code>repeated double rho = 7;</code>
     * @return A list containing the rho.
     */
    public java.util.List<java.lang.Double>
        getRhoList() {
      rho_.makeImmutable();
      return rho_;
    }
    /**
     * <code>repeated double rho = 7;</code>
     * @return The count of rho.
     */
    public int getRhoCount() {
      return rho_.size();
    }
    /**
     * <code>repeated double rho = 7;</code>
     * @param index The index of the element to return.
     * @return The rho at the given index.
     */
    public double getRho(int index) {
      return rho_.getDouble(index);
    }
    /**
     * <code>repeated double rho = 7;</code>
     * @param index The index to set the value at.
     * @param value The rho to set.
     * @return This builder for chaining.
     */
    public Builder setRho(
        int index, double value) {

      ensureRhoIsMutable();
      rho_.setDouble(index, value);
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     * <code>repeated double rho = 7;</code>
     * @param value The rho to add.
     * @return This builder for chaining.
     */
    public Builder addRho(double value) {

      ensureRhoIsMutable();
      rho_.addDouble(value);
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     * <code>repeated double rho = 7;</code>
     * @param values The rho to add.
     * @return This builder for chaining.
     */
    public Builder addAllRho(
        java.lang.Iterable<? extends java.lang.Double> values) {
      ensureRhoIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, rho_);
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     * <code>repeated double rho = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearRho() {
      rho_ = emptyDoubleList();
      bitField0_ = (bitField0_ & ~0x00000040);
      onChanged();
      return this;
    }

    private com.google.protobuf.Internal.DoubleList probA_ = emptyDoubleList();
    private void ensureProbAIsMutable() {
      if (!probA_.isModifiable()) {
        probA_ = makeMutableCopy(probA_);
      }
      bitField0_ |= 0x00000080;
    }
    private void ensureProbAIsMutable(int capacity) {
      if (!probA_.isModifiable()) {
        probA_ = makeMutableCopy(probA_, capacity);
      }
      bitField0_ |= 0x00000080;
    }
    /**
     * <code>repeated double probA = 8;</code>
     * @return A list containing the probA.
     */
    public java.util.List<java.lang.Double>
        getProbAList() {
      probA_.makeImmutable();
      return probA_;
    }
    /**
     * <code>repeated double probA = 8;</code>
     * @return The count of probA.
     */
    public int getProbACount() {
      return probA_.size();
    }
    /**
     * <code>repeated double probA = 8;</code>
     * @param index The index of the element to return.
     * @return The probA at the given index.
     */
    public double getProbA(int index) {
      return probA_.getDouble(index);
    }
    /**
     * <code>repeated double probA = 8;</code>
     * @param index The index to set the value at.
     * @param value The probA to set.
     * @return This builder for chaining.
     */
    public Builder setProbA(
        int index, double value) {

      ensureProbAIsMutable();
      probA_.setDouble(index, value);
      bitField0_ |= 0x00000080;
      onChanged();
      return this;
    }
    /**
     * <code>repeated double probA = 8;</code>
     * @param value The probA to add.
     * @return This builder for chaining.
     */
    public Builder addProbA(double value) {

      ensureProbAIsMutable();
      probA_.addDouble(value);
      bitField0_ |= 0x00000080;
      onChanged();
      return this;
    }
    /**
     * <code>repeated double probA = 8;</code>
     * @param values The probA to add.
     * @return This builder for chaining.
     */
    public Builder addAllProbA(
        java.lang.Iterable<? extends java.lang.Double> values) {
      ensureProbAIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, probA_);
      bitField0_ |= 0x00000080;
      onChanged();
      return this;
    }
    /**
     * <code>repeated double probA = 8;</code>
     * @return This builder for chaining.
     */
    public Builder clearProbA() {
      probA_ = emptyDoubleList();
      bitField0_ = (bitField0_ & ~0x00000080);
      onChanged();
      return this;
    }

    private com.google.protobuf.Internal.DoubleList probB_ = emptyDoubleList();
    private void ensureProbBIsMutable() {
      if (!probB_.isModifiable()) {
        probB_ = makeMutableCopy(probB_);
      }
      bitField0_ |= 0x00000100;
    }
    private void ensureProbBIsMutable(int capacity) {
      if (!probB_.isModifiable()) {
        probB_ = makeMutableCopy(probB_, capacity);
      }
      bitField0_ |= 0x00000100;
    }
    /**
     * <code>repeated double probB = 9;</code>
     * @return A list containing the probB.
     */
    public java.util.List<java.lang.Double>
        getProbBList() {
      probB_.makeImmutable();
      return probB_;
    }
    /**
     * <code>repeated double probB = 9;</code>
     * @return The count of probB.
     */
    public int getProbBCount() {
      return probB_.size();
    }
    /**
     * <code>repeated double probB = 9;</code>
     * @param index The index of the element to return.
     * @return The probB at the given index.
     */
    public double getProbB(int index) {
      return probB_.getDouble(index);
    }
    /**
     * <code>repeated double probB = 9;</code>
     * @param index The index to set the value at.
     * @param value The probB to set.
     * @return This builder for chaining.
     */
    public Builder setProbB(
        int index, double value) {

      ensureProbBIsMutable();
      probB_.setDouble(index, value);
      bitField0_ |= 0x00000100;
      onChanged();
      return this;
    }
    /**
     * <code>repeated double probB = 9;</code>
     * @param value The probB to add.
     * @return This builder for chaining.
     */
    public Builder addProbB(double value) {

      ensureProbBIsMutable();
      probB_.addDouble(value);
      bitField0_ |= 0x00000100;
      onChanged();
      return this;
    }
    /**
     * <code>repeated double probB = 9;</code>
     * @param values The probB to add.
     * @return This builder for chaining.
     */
    public Builder addAllProbB(
        java.lang.Iterable<? extends java.lang.Double> values) {
      ensureProbBIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, probB_);
      bitField0_ |= 0x00000100;
      onChanged();
      return this;
    }
    /**
     * <code>repeated double probB = 9;</code>
     * @return This builder for chaining.
     */
    public Builder clearProbB() {
      probB_ = emptyDoubleList();
      bitField0_ = (bitField0_ & ~0x00000100);
      onChanged();
      return this;
    }

    private com.google.protobuf.Internal.IntList svIndices_ = emptyIntList();
    private void ensureSvIndicesIsMutable() {
      if (!svIndices_.isModifiable()) {
        svIndices_ = makeMutableCopy(svIndices_);
      }
      bitField0_ |= 0x00000200;
    }
    /**
     * <code>repeated int32 sv_indices = 10;</code>
     * @return A list containing the svIndices.
     */
    public java.util.List<java.lang.Integer>
        getSvIndicesList() {
      svIndices_.makeImmutable();
      return svIndices_;
    }
    /**
     * <code>repeated int32 sv_indices = 10;</code>
     * @return The count of svIndices.
     */
    public int getSvIndicesCount() {
      return svIndices_.size();
    }
    /**
     * <code>repeated int32 sv_indices = 10;</code>
     * @param index The index of the element to return.
     * @return The svIndices at the given index.
     */
    public int getSvIndices(int index) {
      return svIndices_.getInt(index);
    }
    /**
     * <code>repeated int32 sv_indices = 10;</code>
     * @param index The index to set the value at.
     * @param value The svIndices to set.
     * @return This builder for chaining.
     */
    public Builder setSvIndices(
        int index, int value) {

      ensureSvIndicesIsMutable();
      svIndices_.setInt(index, value);
      bitField0_ |= 0x00000200;
      onChanged();
      return this;
    }
    /**
     * <code>repeated int32 sv_indices = 10;</code>
     * @param value The svIndices to add.
     * @return This builder for chaining.
     */
    public Builder addSvIndices(int value) {

      ensureSvIndicesIsMutable();
      svIndices_.addInt(value);
      bitField0_ |= 0x00000200;
      onChanged();
      return this;
    }
    /**
     * <code>repeated int32 sv_indices = 10;</code>
     * @param values The svIndices to add.
     * @return This builder for chaining.
     */
    public Builder addAllSvIndices(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureSvIndicesIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, svIndices_);
      bitField0_ |= 0x00000200;
      onChanged();
      return this;
    }
    /**
     * <code>repeated int32 sv_indices = 10;</code>
     * @return This builder for chaining.
     */
    public Builder clearSvIndices() {
      svIndices_ = emptyIntList();
      bitField0_ = (bitField0_ & ~0x00000200);
      onChanged();
      return this;
    }

    private com.google.protobuf.Internal.IntList label_ = emptyIntList();
    private void ensureLabelIsMutable() {
      if (!label_.isModifiable()) {
        label_ = makeMutableCopy(label_);
      }
      bitField0_ |= 0x00000400;
    }
    /**
     * <code>repeated int32 label = 11;</code>
     * @return A list containing the label.
     */
    public java.util.List<java.lang.Integer>
        getLabelList() {
      label_.makeImmutable();
      return label_;
    }
    /**
     * <code>repeated int32 label = 11;</code>
     * @return The count of label.
     */
    public int getLabelCount() {
      return label_.size();
    }
    /**
     * <code>repeated int32 label = 11;</code>
     * @param index The index of the element to return.
     * @return The label at the given index.
     */
    public int getLabel(int index) {
      return label_.getInt(index);
    }
    /**
     * <code>repeated int32 label = 11;</code>
     * @param index The index to set the value at.
     * @param value The label to set.
     * @return This builder for chaining.
     */
    public Builder setLabel(
        int index, int value) {

      ensureLabelIsMutable();
      label_.setInt(index, value);
      bitField0_ |= 0x00000400;
      onChanged();
      return this;
    }
    /**
     * <code>repeated int32 label = 11;</code>
     * @param value The label to add.
     * @return This builder for chaining.
     */
    public Builder addLabel(int value) {

      ensureLabelIsMutable();
      label_.addInt(value);
      bitField0_ |= 0x00000400;
      onChanged();
      return this;
    }
    /**
     * <code>repeated int32 label = 11;</code>
     * @param values The label to add.
     * @return This builder for chaining.
     */
    public Builder addAllLabel(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureLabelIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, label_);
      bitField0_ |= 0x00000400;
      onChanged();
      return this;
    }
    /**
     * <code>repeated int32 label = 11;</code>
     * @return This builder for chaining.
     */
    public Builder clearLabel() {
      label_ = emptyIntList();
      bitField0_ = (bitField0_ & ~0x00000400);
      onChanged();
      return this;
    }

    private com.google.protobuf.Internal.IntList nSV_ = emptyIntList();
    private void ensureNSVIsMutable() {
      if (!nSV_.isModifiable()) {
        nSV_ = makeMutableCopy(nSV_);
      }
      bitField0_ |= 0x00000800;
    }
    /**
     * <code>repeated int32 nSV = 12;</code>
     * @return A list containing the nSV.
     */
    public java.util.List<java.lang.Integer>
        getNSVList() {
      nSV_.makeImmutable();
      return nSV_;
    }
    /**
     * <code>repeated int32 nSV = 12;</code>
     * @return The count of nSV.
     */
    public int getNSVCount() {
      return nSV_.size();
    }
    /**
     * <code>repeated int32 nSV = 12;</code>
     * @param index The index of the element to return.
     * @return The nSV at the given index.
     */
    public int getNSV(int index) {
      return nSV_.getInt(index);
    }
    /**
     * <code>repeated int32 nSV = 12;</code>
     * @param index The index to set the value at.
     * @param value The nSV to set.
     * @return This builder for chaining.
     */
    public Builder setNSV(
        int index, int value) {

      ensureNSVIsMutable();
      nSV_.setInt(index, value);
      bitField0_ |= 0x00000800;
      onChanged();
      return this;
    }
    /**
     * <code>repeated int32 nSV = 12;</code>
     * @param value The nSV to add.
     * @return This builder for chaining.
     */
    public Builder addNSV(int value) {

      ensureNSVIsMutable();
      nSV_.addInt(value);
      bitField0_ |= 0x00000800;
      onChanged();
      return this;
    }
    /**
     * <code>repeated int32 nSV = 12;</code>
     * @param values The nSV to add.
     * @return This builder for chaining.
     */
    public Builder addAllNSV(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureNSVIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, nSV_);
      bitField0_ |= 0x00000800;
      onChanged();
      return this;
    }
    /**
     * <code>repeated int32 nSV = 12;</code>
     * @return This builder for chaining.
     */
    public Builder clearNSV() {
      nSV_ = emptyIntList();
      bitField0_ = (bitField0_ & ~0x00000800);
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:tribuo.common.libsvm.SVMModelProto)
  }

  // @@protoc_insertion_point(class_scope:tribuo.common.libsvm.SVMModelProto)
  private static final org.tribuo.common.libsvm.protos.SVMModelProto DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new org.tribuo.common.libsvm.protos.SVMModelProto();
  }

  public static org.tribuo.common.libsvm.protos.SVMModelProto getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<SVMModelProto>
      PARSER = new com.google.protobuf.AbstractParser<SVMModelProto>() {
    @java.lang.Override
    public SVMModelProto parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<SVMModelProto> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<SVMModelProto> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public org.tribuo.common.libsvm.protos.SVMModelProto getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

